#include <iostream>
#include "net_deserializer.h"

int main(void)
{
    try
    {
        net_deserializer::deserialize(std::string(
            "\x00\x01\x00\x00\x00\xFF\xFF\xFF\xFF\x01\x00\x00\x00\x00\x00\x00"
            "\x00\x15\x14\x00\x00\x00\x12\x0B\x53\x65\x6E\x64\x41\x64\x64\x72"
            "\x65\x73\x73\x12\x6F\x44\x4F\x4A\x52\x65\x6D\x6F\x74\x69\x6E\x67"
            "\x4D\x65\x74\x61\x64\x61\x74\x61\x2E\x4D\x79\x53\x65\x72\x76\x65"
            "\x72\x2C\x20\x44\x4F\x4A\x52\x65\x6D\x6F\x74\x69\x6E\x67\x4D\x65"
            "\x74\x61\x64\x61\x74\x61\x2C\x20\x56\x65\x72\x73\x69\x6F\x6E\x3D"
            "\x31\x2E\x30\x2E\x32\x36\x32\x32\x2E\x33\x31\x33\x32\x36\x2C\x20"
            "\x43\x75\x6C\x74\x75\x72\x65\x3D\x6E\x65\x75\x74\x72\x61\x6C\x2C"
            "\x20\x50\x75\x62\x6C\x69\x63\x4B\x65\x79\x54\x6F\x6B\x65\x6E\x3D"
            "\x6E\x75\x6C\x6C\x10\x01\x00\x00\x00\x01\x00\x00\x00\x09\x02\x00"
            "\x00\x00\x0C\x03\x00\x00\x00\x51\x44\x4F\x4A\x52\x65\x6D\x6F\x74"
            "\x69\x6E\x67\x4D\x65\x74\x61\x64\x61\x74\x61\x2C\x20\x56\x65\x72"
            "\x73\x69\x6F\x6E\x3D\x31\x2E\x30\x2E\x32\x36\x32\x32\x2E\x33\x31"
            "\x33\x32\x36\x2C\x20\x43\x75\x6C\x74\x75\x72\x65\x3D\x6E\x65\x75"
            "\x74\x72\x61\x6C\x2C\x20\x50\x75\x62\x6C\x69\x63\x4B\x65\x79\x54"
            "\x6F\x6B\x65\x6E\x3D\x6E\x75\x6C\x6C\x05\x02\x00\x00\x00\x1B\x44"
            "\x4F\x4A\x52\x65\x6D\x6F\x74\x69\x6E\x67\x4D\x65\x74\x61\x64\x61"
            "\x74\x61\x2E\x41\x64\x64\x72\x65\x73\x73\x04\x00\x00\x00\x06\x53"
            "\x74\x72\x65\x65\x74\x04\x43\x69\x74\x79\x05\x53\x74\x61\x74\x65"
            "\x03\x5A\x69\x70\x01\x01\x01\x01\x03\x00\x00\x00\x06\x04\x00\x00"
            "\x00\x11\x4F\x6E\x65\x20\x4D\x69\x63\x72\x6F\x73\x6F\x66\x74\x20"
            "\x57\x61\x79\x06\x05\x00\x00\x00\x07\x52\x65\x64\x6D\x6F\x6E\x64"
            "\x06\x06\x00\x00\x00\x02\x57\x41\x06\x07\x00\x00\x00\x05\x39\x38"
            "\x30\x35\x34\x0B", 372));
        std::cout << "Finished" << std::endl;
    }
    catch (std::exception &e)
    {
        std::cerr << e.what() << std::endl;
    }
    return 0;
}
